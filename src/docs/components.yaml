components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Job:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        use_lookup:
          type: boolean
        resolution:
          type: number
        cloud_cover:
          type: number
        start_timestamp:
          type: date-time
        end_timestamp:
          type: date-time
        sampling_strategy:
          type: string
        use_pretrained_model:
          type: boolean
        random_forrest:
          type: object
          properties:
            n_tree:
              type: number
            cross_validation_folds:
              type: number
        support_vector_machine:
          type: object
          properties:
            sigma:
              type: number
            c:
              type: number
            cross_validation_folds:
              type: number
        area_of_interest:
          type: object
        user_id:
          type: string
        created:
          type: date-time
        finished:
          type: date-time
          nullable: true
        status:
          type: string
          enum: [running, error, success]
      example:
        id: "61b5dac80ba4add8236ed484"
        name: "Job name"
        use_lookup: false
        resolution: 10
        cloud_cover: 15
        start_timestamp: "2020-01-01T00:00:00.000Z"
        end_timestamp: "2020-06-01T00:00:00.000Z"
        sampling_strategy: "regular"
        use_pretrained_model: false
        user_id: "61b5dac80ba4add9236dc231"
        created: "2021-12-12T11:19:36.420Z"
        finished: null
        status: running
        random_forrest: { "n_tree": 800, "cross_validation_folds": 5 }
        area_of_interest:
          {
            "type": "Feature",
            "properties": {},
            "geometry":
              {
                "type": "Polygon",
                "coordinates":
                  [
                    [
                      [7.571640014648437, 51.93653958505235],
                      [7.608976364135742, 51.93653958505235],
                      [7.608976364135742, 51.96521171889782],
                      [7.571640014648437, 51.96521171889782],
                      [7.571640014648437, 51.93653958505235],
                    ],
                  ],
              },
          }

    JobFile:
      type: object
      properties:
        name:
          type: string
        size:
          type: number
          description: "In bytes."
        modified:
          type: string
          format: date-time
      example:
        name: "samples.geojson"
        size: 698
        modified: "2021-12-16T15:42:42.356Z"

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        created:
          type: string
          format: date-time
      example:
        id: "61b5dac80ba4add8236ed488"
        name: "Jane Doe"
        email: "jane.doe@example.com"
        created: "2022-01-02T18:00:42.356Z"

    BaseException:
      type: object
      properties:
        statusCode:
          type: number
        name:
          type: string
        message:
          type: string

  responses:
    BadRequestException:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseException"
          example:
            statusCode: 400
            name: "Bad Request"
            message: ""
    InternalServerErrorException:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseException"
          example:
            statusCode: 500
            name: "Internal Server Error"
            message: ""
    NotFoundException:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseException"
          example:
            statusCode: 404
            name: "Not Found"
            message: ""
    UnauthorizedException:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseException"
          example:
            statusCode: 401
            name: "Unauthorized"
            message: ""
